
/*************
 Driver program to test below functions
 
int main()
{
    int count1,count2,choice;
    cin >> count1;
    
    int *degree1 = new int[count1];
    int *coeff1 = new int[count1];
    
    for(int i=0;i < count1; i++) {
        cin >> degree1[i];
    }
    
    for(int i=0;i < count1; i++) {
        cin >> coeff1[i];
    }
    
    Polynomial first;
    for(int i = 0; i < count1; i++){
        first.setCoefficient(degree1[i],coeff1[i]);
    }
    
    cin >> count2;
    
    int *degree2 = new int[count2];
    int *coeff2 = new int[count2];
    
    for(int i=0;i < count2; i++) {
        cin >> degree2[i];
    }
    
    for(int i=0;i < count2; i++) {
        cin >> coeff2[i];
    }
    
    Polynomial second;
    for(int i = 0; i < count2; i++){
        second.setCoefficient(degree2[i],coeff2[i]);
    }
    
    cin >> choice;
    
    Polynomial result;
    switch(choice){
            // Add
        case 1:
            result = first + second;
            result.print();
            break;
            // Subtract
        case 2 :
            result = first - second;
            result.print();
            break;
            // Multiply
        case 3 :
            result = first * second;
            result.print();
            break;
            
        case 4 : // Copy constructor
        {
            Polynomial third(first);
            if(third.degCoeff == first.degCoeff) {
                cout << "false" << endl;
            }
            else {
                cout << "true" << endl;
            }
            break;
        }
            
        case 5 : // Copy assignment operator
        {
            Polynomial fourth(first);
            if(fourth.degCoeff == first.degCoeff) {
                cout << "false" << endl;
            }
            else {
                cout << "true" << endl;
            }
            break;
        }
            
    }
    
    return 0;
}
****************/
class Polynomial{
    public:
    int *degCoeff;
    int size;

    Polynomial(){
        degCoeff = new int[10];
        size = 10;
        for(int i=0; i<size; i+=1){
            degCoeff[i] = 0;
        }
    }
    Polynomial(Polynomial const &p){
        degCoeff = new int[p.size];
        for(int i=0; i<p.size; i+=1){
            degCoeff[i] = p.degCoeff[i];
        }
        size = p.size;
    }
    void setCoefficient(int degree, int coeff){
        if(degree>=size){
            int newSize = 2*size;
            while(newSize<=degree){
                newSize*=2;
            }
            int *newDegCoeff = new int[newSize];
            for(int i=0; i<newSize; i+=1){
                newDegCoeff[i] = 0;
            }
            for(int j=0; j<size; j+=1){
                newDegCoeff[j] = degCoeff[j];
            }
            size = newSize;
            delete [] degCoeff;
            degCoeff = newDegCoeff;
        }
        degCoeff[degree] = coeff;
    }

    void operator=(Polynomial const &p){
        delete [] degCoeff;
        degCoeff = new int[p.size];
        for(int i=0; i<size; i+=1){
            degCoeff[i] = p.degCoeff[i];
        }
        size = p.size;
    }

    Polynomial operator+(Polynomial const &p){
        Polynomial newPoly;
        int i=0, j=0;
        while(i<this->size && j<p.size){
            int coeff = this->degCoeff[i] + p.degCoeff[i];
            newPoly.setCoefficient(i, coeff);
            i+=1;
            j+=1;
        }
        while(i<this->size){
            newPoly.setCoefficient(i, this->degCoeff[i]);
            i+=1;
        }
        while(j<p.size){
            newPoly.setCoefficient(j, p.degCoeff[j]);
            j+=1;
        }
        return newPoly;
    }
    Polynomial operator-(Polynomial const &p){
        Polynomial newPoly;
        int i=0, j=0;
        while(i<this->size && j<p.size){
            int coeff = this->degCoeff[i] - p.degCoeff[i];
            newPoly.setCoefficient(i, coeff);
            i+=1;
            j+=1;
        }
        while(i<this->size){
            newPoly.setCoefficient(i, this->degCoeff[i]);
            i+=1;
        }
        while(j<p.size){
            newPoly.setCoefficient(j, (-1)*(p.degCoeff[j]));
            j+=1;
        }
        return newPoly;
    }
    int getCoefficient(int degree){
        if(degree>=size){
            return 0;
        }else{
            return degCoeff[degree];
        }
    }

    Polynomial operator*(Polynomial const &p){
        Polynomial newPoly;
        for(int i=0; i<size; i+=1){
            for(int j=0; j<p.size; j+=1){
                int deg = i+j;
                int coeff = newPoly.getCoefficient(deg) + (this->degCoeff[i]*p.degCoeff[j]);
                newPoly.setCoefficient(deg, coeff);
            }
        }
        return newPoly;
    }

    void print(){
        for(int i=0; i<size; i+=1){
            if(degCoeff[i]!=0){
                cout<<degCoeff[i]<<"x"<<i<<" ";
            }
        }
        cout<<endl;
    }

};
